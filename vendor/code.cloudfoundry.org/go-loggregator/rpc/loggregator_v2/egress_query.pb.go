// Code generated by protoc-gen-go. DO NOT EDIT.
// source: egress_query.proto

package loggregator_v2

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ContainerMetricRequest struct {
	SourceId string `protobuf:"bytes,1,opt,name=source_id,json=sourceId" json:"source_id,omitempty"`
	// TODO: This can be removed once the envelope.deprecated_tags is removed.
	UsePreferredTags bool `protobuf:"varint,2,opt,name=use_preferred_tags,json=usePreferredTags" json:"use_preferred_tags,omitempty"`
}

func (m *ContainerMetricRequest) Reset()                    { *m = ContainerMetricRequest{} }
func (m *ContainerMetricRequest) String() string            { return proto.CompactTextString(m) }
func (*ContainerMetricRequest) ProtoMessage()               {}
func (*ContainerMetricRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *ContainerMetricRequest) GetSourceId() string {
	if m != nil {
		return m.SourceId
	}
	return ""
}

func (m *ContainerMetricRequest) GetUsePreferredTags() bool {
	if m != nil {
		return m.UsePreferredTags
	}
	return false
}

type QueryResponse struct {
	Envelopes []*Envelope `protobuf:"bytes,1,rep,name=envelopes" json:"envelopes,omitempty"`
}

func (m *QueryResponse) Reset()                    { *m = QueryResponse{} }
func (m *QueryResponse) String() string            { return proto.CompactTextString(m) }
func (*QueryResponse) ProtoMessage()               {}
func (*QueryResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *QueryResponse) GetEnvelopes() []*Envelope {
	if m != nil {
		return m.Envelopes
	}
	return nil
}

func init() {
	proto.RegisterType((*ContainerMetricRequest)(nil), "loggregator.v2.ContainerMetricRequest")
	proto.RegisterType((*QueryResponse)(nil), "loggregator.v2.QueryResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for EgressQuery service

type EgressQueryClient interface {
	ContainerMetrics(ctx context.Context, in *ContainerMetricRequest, opts ...grpc.CallOption) (*QueryResponse, error)
}

type egressQueryClient struct {
	cc *grpc.ClientConn
}

func NewEgressQueryClient(cc *grpc.ClientConn) EgressQueryClient {
	return &egressQueryClient{cc}
}

func (c *egressQueryClient) ContainerMetrics(ctx context.Context, in *ContainerMetricRequest, opts ...grpc.CallOption) (*QueryResponse, error) {
	out := new(QueryResponse)
	err := grpc.Invoke(ctx, "/loggregator.v2.EgressQuery/ContainerMetrics", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for EgressQuery service

type EgressQueryServer interface {
	ContainerMetrics(context.Context, *ContainerMetricRequest) (*QueryResponse, error)
}

func RegisterEgressQueryServer(s *grpc.Server, srv EgressQueryServer) {
	s.RegisterService(&_EgressQuery_serviceDesc, srv)
}

func _EgressQuery_ContainerMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerMetricRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EgressQueryServer).ContainerMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/loggregator.v2.EgressQuery/ContainerMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EgressQueryServer).ContainerMetrics(ctx, req.(*ContainerMetricRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _EgressQuery_serviceDesc = grpc.ServiceDesc{
	ServiceName: "loggregator.v2.EgressQuery",
	HandlerType: (*EgressQueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ContainerMetrics",
			Handler:    _EgressQuery_ContainerMetrics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "egress_query.proto",
}

func init() { proto.RegisterFile("egress_query.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 233 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0x41, 0x4b, 0xc3, 0x40,
	0x10, 0x85, 0x8d, 0x82, 0x34, 0x5b, 0x2c, 0x65, 0x0f, 0x12, 0x2a, 0x42, 0xc8, 0x41, 0x72, 0x90,
	0x1c, 0x22, 0xf8, 0x07, 0xa4, 0x88, 0x07, 0x41, 0x17, 0x6f, 0x1e, 0x42, 0x4c, 0x9e, 0x4b, 0xa4,
	0x64, 0xb6, 0x33, 0xbb, 0x05, 0xff, 0xbd, 0x98, 0x5a, 0x24, 0xa1, 0xd7, 0x79, 0x1f, 0x8f, 0xef,
	0x8d, 0xd2, 0xb0, 0x0c, 0x91, 0x6a, 0x1b, 0xc0, 0xdf, 0x85, 0x63, 0xf2, 0xa4, 0x17, 0x1b, 0xb2,
	0x96, 0x61, 0x6b, 0x4f, 0x5c, 0xec, 0xca, 0xd5, 0x02, 0xfd, 0x0e, 0x1b, 0x72, 0xd8, 0xe7, 0x59,
	0xa3, 0x2e, 0x1f, 0xa8, 0xf7, 0x75, 0xd7, 0x83, 0x9f, 0xe1, 0xb9, 0x6b, 0x0c, 0xb6, 0x01, 0xe2,
	0xf5, 0x95, 0x8a, 0x85, 0x02, 0x37, 0xa8, 0xba, 0x36, 0x89, 0xd2, 0x28, 0x8f, 0xcd, 0x6c, 0x7f,
	0x78, 0x6a, 0xf5, 0xad, 0xd2, 0x41, 0x50, 0x39, 0xc6, 0x27, 0x98, 0xd1, 0x56, 0xbe, 0xb6, 0x92,
	0x9c, 0xa6, 0x51, 0x3e, 0x33, 0xcb, 0x20, 0x78, 0x39, 0x04, 0x6f, 0xb5, 0x95, 0xec, 0x51, 0x5d,
	0xbc, 0xfe, 0x3a, 0x19, 0x88, 0xa3, 0x5e, 0xa0, 0xef, 0x55, 0x7c, 0xf0, 0x90, 0x24, 0x4a, 0xcf,
	0xf2, 0x79, 0x99, 0x14, 0x63, 0xd3, 0x62, 0xfd, 0x07, 0x98, 0x7f, 0xb4, 0xfc, 0x52, 0xf3, 0xf5,
	0xb0, 0x71, 0xa8, 0xd3, 0xef, 0x6a, 0x39, 0x91, 0x17, 0x7d, 0x33, 0xed, 0x39, 0x3e, 0x6f, 0x75,
	0x3d, 0xe5, 0x46, 0x86, 0xd9, 0xc9, 0xc7, 0xf9, 0xf0, 0xa0, 0xbb, 0x9f, 0x00, 0x00, 0x00, 0xff,
	0xff, 0xf7, 0x83, 0x7f, 0x56, 0x56, 0x01, 0x00, 0x00,
}
