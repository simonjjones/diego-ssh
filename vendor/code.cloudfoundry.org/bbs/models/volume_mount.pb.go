// Code generated by protoc-gen-gogo.
// source: volume_mount.proto
// DO NOT EDIT!

package models

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type SharedDevice struct {
	VolumeId    string `protobuf:"bytes,1,opt,name=volume_id,json=volumeId" json:"volume_id"`
	MountConfig string `protobuf:"bytes,2,opt,name=mount_config,json=mountConfig" json:"mount_config"`
}

func (m *SharedDevice) Reset()                    { *m = SharedDevice{} }
func (*SharedDevice) ProtoMessage()               {}
func (*SharedDevice) Descriptor() ([]byte, []int) { return fileDescriptorVolumeMount, []int{0} }

func (m *SharedDevice) GetVolumeId() string {
	if m != nil {
		return m.VolumeId
	}
	return ""
}

func (m *SharedDevice) GetMountConfig() string {
	if m != nil {
		return m.MountConfig
	}
	return ""
}

type VolumeMount struct {
	Driver       string `protobuf:"bytes,1,opt,name=driver" json:"driver"`
	ContainerDir string `protobuf:"bytes,3,opt,name=container_dir,json=containerDir" json:"container_dir"`
	Mode         string `protobuf:"bytes,6,opt,name=mode" json:"mode"`
	// oneof device {
	Shared *SharedDevice `protobuf:"bytes,7,opt,name=shared" json:"shared"`
}

func (m *VolumeMount) Reset()                    { *m = VolumeMount{} }
func (*VolumeMount) ProtoMessage()               {}
func (*VolumeMount) Descriptor() ([]byte, []int) { return fileDescriptorVolumeMount, []int{1} }

func (m *VolumeMount) GetDriver() string {
	if m != nil {
		return m.Driver
	}
	return ""
}

func (m *VolumeMount) GetContainerDir() string {
	if m != nil {
		return m.ContainerDir
	}
	return ""
}

func (m *VolumeMount) GetMode() string {
	if m != nil {
		return m.Mode
	}
	return ""
}

func (m *VolumeMount) GetShared() *SharedDevice {
	if m != nil {
		return m.Shared
	}
	return nil
}

type VolumePlacement struct {
	DriverNames []string `protobuf:"bytes,1,rep,name=driver_names,json=driverNames" json:"driver_names"`
}

func (m *VolumePlacement) Reset()                    { *m = VolumePlacement{} }
func (*VolumePlacement) ProtoMessage()               {}
func (*VolumePlacement) Descriptor() ([]byte, []int) { return fileDescriptorVolumeMount, []int{2} }

func (m *VolumePlacement) GetDriverNames() []string {
	if m != nil {
		return m.DriverNames
	}
	return nil
}

func init() {
	proto.RegisterType((*SharedDevice)(nil), "models.SharedDevice")
	proto.RegisterType((*VolumeMount)(nil), "models.VolumeMount")
	proto.RegisterType((*VolumePlacement)(nil), "models.VolumePlacement")
}
func (this *SharedDevice) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SharedDevice)
	if !ok {
		that2, ok := that.(SharedDevice)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.VolumeId != that1.VolumeId {
		return false
	}
	if this.MountConfig != that1.MountConfig {
		return false
	}
	return true
}
func (this *VolumeMount) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*VolumeMount)
	if !ok {
		that2, ok := that.(VolumeMount)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Driver != that1.Driver {
		return false
	}
	if this.ContainerDir != that1.ContainerDir {
		return false
	}
	if this.Mode != that1.Mode {
		return false
	}
	if !this.Shared.Equal(that1.Shared) {
		return false
	}
	return true
}
func (this *VolumePlacement) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*VolumePlacement)
	if !ok {
		that2, ok := that.(VolumePlacement)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.DriverNames) != len(that1.DriverNames) {
		return false
	}
	for i := range this.DriverNames {
		if this.DriverNames[i] != that1.DriverNames[i] {
			return false
		}
	}
	return true
}
func (this *SharedDevice) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&models.SharedDevice{")
	s = append(s, "VolumeId: "+fmt.Sprintf("%#v", this.VolumeId)+",\n")
	s = append(s, "MountConfig: "+fmt.Sprintf("%#v", this.MountConfig)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VolumeMount) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&models.VolumeMount{")
	s = append(s, "Driver: "+fmt.Sprintf("%#v", this.Driver)+",\n")
	s = append(s, "ContainerDir: "+fmt.Sprintf("%#v", this.ContainerDir)+",\n")
	s = append(s, "Mode: "+fmt.Sprintf("%#v", this.Mode)+",\n")
	if this.Shared != nil {
		s = append(s, "Shared: "+fmt.Sprintf("%#v", this.Shared)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VolumePlacement) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&models.VolumePlacement{")
	if this.DriverNames != nil {
		s = append(s, "DriverNames: "+fmt.Sprintf("%#v", this.DriverNames)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringVolumeMount(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *SharedDevice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SharedDevice) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintVolumeMount(dAtA, i, uint64(len(m.VolumeId)))
	i += copy(dAtA[i:], m.VolumeId)
	dAtA[i] = 0x12
	i++
	i = encodeVarintVolumeMount(dAtA, i, uint64(len(m.MountConfig)))
	i += copy(dAtA[i:], m.MountConfig)
	return i, nil
}

func (m *VolumeMount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VolumeMount) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintVolumeMount(dAtA, i, uint64(len(m.Driver)))
	i += copy(dAtA[i:], m.Driver)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintVolumeMount(dAtA, i, uint64(len(m.ContainerDir)))
	i += copy(dAtA[i:], m.ContainerDir)
	dAtA[i] = 0x32
	i++
	i = encodeVarintVolumeMount(dAtA, i, uint64(len(m.Mode)))
	i += copy(dAtA[i:], m.Mode)
	if m.Shared != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintVolumeMount(dAtA, i, uint64(m.Shared.Size()))
		n1, err := m.Shared.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *VolumePlacement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VolumePlacement) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.DriverNames) > 0 {
		for _, s := range m.DriverNames {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func encodeFixed64VolumeMount(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32VolumeMount(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintVolumeMount(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *SharedDevice) Size() (n int) {
	var l int
	_ = l
	l = len(m.VolumeId)
	n += 1 + l + sovVolumeMount(uint64(l))
	l = len(m.MountConfig)
	n += 1 + l + sovVolumeMount(uint64(l))
	return n
}

func (m *VolumeMount) Size() (n int) {
	var l int
	_ = l
	l = len(m.Driver)
	n += 1 + l + sovVolumeMount(uint64(l))
	l = len(m.ContainerDir)
	n += 1 + l + sovVolumeMount(uint64(l))
	l = len(m.Mode)
	n += 1 + l + sovVolumeMount(uint64(l))
	if m.Shared != nil {
		l = m.Shared.Size()
		n += 1 + l + sovVolumeMount(uint64(l))
	}
	return n
}

func (m *VolumePlacement) Size() (n int) {
	var l int
	_ = l
	if len(m.DriverNames) > 0 {
		for _, s := range m.DriverNames {
			l = len(s)
			n += 1 + l + sovVolumeMount(uint64(l))
		}
	}
	return n
}

func sovVolumeMount(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozVolumeMount(x uint64) (n int) {
	return sovVolumeMount(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *SharedDevice) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SharedDevice{`,
		`VolumeId:` + fmt.Sprintf("%v", this.VolumeId) + `,`,
		`MountConfig:` + fmt.Sprintf("%v", this.MountConfig) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VolumeMount) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VolumeMount{`,
		`Driver:` + fmt.Sprintf("%v", this.Driver) + `,`,
		`ContainerDir:` + fmt.Sprintf("%v", this.ContainerDir) + `,`,
		`Mode:` + fmt.Sprintf("%v", this.Mode) + `,`,
		`Shared:` + strings.Replace(fmt.Sprintf("%v", this.Shared), "SharedDevice", "SharedDevice", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VolumePlacement) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VolumePlacement{`,
		`DriverNames:` + fmt.Sprintf("%v", this.DriverNames) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringVolumeMount(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *SharedDevice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVolumeMount
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SharedDevice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SharedDevice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VolumeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVolumeMount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVolumeMount
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VolumeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MountConfig", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVolumeMount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVolumeMount
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MountConfig = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVolumeMount(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVolumeMount
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VolumeMount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVolumeMount
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VolumeMount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VolumeMount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Driver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVolumeMount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVolumeMount
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Driver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainerDir", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVolumeMount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVolumeMount
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContainerDir = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVolumeMount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVolumeMount
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shared", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVolumeMount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVolumeMount
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Shared == nil {
				m.Shared = &SharedDevice{}
			}
			if err := m.Shared.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVolumeMount(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVolumeMount
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VolumePlacement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVolumeMount
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VolumePlacement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VolumePlacement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DriverNames", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVolumeMount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVolumeMount
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DriverNames = append(m.DriverNames, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVolumeMount(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVolumeMount
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVolumeMount(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVolumeMount
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVolumeMount
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVolumeMount
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthVolumeMount
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowVolumeMount
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipVolumeMount(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthVolumeMount = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVolumeMount   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("volume_mount.proto", fileDescriptorVolumeMount) }

var fileDescriptorVolumeMount = []byte{
	// 374 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x50, 0xc1, 0x4e, 0xab, 0x40,
	0x14, 0x65, 0x5a, 0xca, 0xa3, 0x03, 0x4f, 0x71, 0x52, 0x13, 0xe2, 0x62, 0x4a, 0xba, 0x30, 0x5d,
	0x28, 0x4d, 0x74, 0xa1, 0x71, 0x89, 0x8d, 0x89, 0x4d, 0x34, 0x06, 0x13, 0xb7, 0x84, 0xc2, 0x94,
	0x4e, 0x52, 0x18, 0x43, 0xa1, 0x6e, 0xfd, 0x04, 0x3f, 0xc3, 0x4f, 0xe9, 0xb2, 0x4b, 0x57, 0xd5,
	0xe2, 0xc6, 0xb8, 0xea, 0x27, 0x18, 0x86, 0x89, 0xb6, 0x1b, 0xe6, 0x9e, 0x73, 0xee, 0xb9, 0xdc,
	0x7b, 0x20, 0x9a, 0xb1, 0x49, 0x1e, 0x13, 0x2f, 0x66, 0x79, 0x92, 0xd9, 0x8f, 0x29, 0xcb, 0x18,
	0x52, 0x62, 0x16, 0x92, 0xc9, 0xf4, 0xe0, 0x38, 0xa2, 0xd9, 0x38, 0x1f, 0xda, 0x01, 0x8b, 0x7b,
	0x11, 0x8b, 0x58, 0x8f, 0xcb, 0xc3, 0x7c, 0xc4, 0x11, 0x07, 0xbc, 0xaa, 0x6c, 0x9d, 0x27, 0xa8,
	0xdf, 0x8f, 0xfd, 0x94, 0x84, 0x7d, 0x32, 0xa3, 0x01, 0x41, 0x36, 0x6c, 0x8a, 0xe1, 0x34, 0x34,
	0x81, 0x05, 0xba, 0x4d, 0x67, 0x6f, 0xbe, 0x6c, 0x4b, 0xdf, 0xcb, 0xf6, 0x9f, 0xe0, 0xaa, 0x55,
	0x79, 0x1d, 0xa2, 0x33, 0xa8, 0xf3, 0x2d, 0xbc, 0x80, 0x25, 0x23, 0x1a, 0x99, 0x35, 0x6e, 0x69,
	0x09, 0xcb, 0x96, 0xe6, 0x6a, 0x1c, 0x5d, 0x72, 0xd0, 0x79, 0x07, 0x50, 0x7b, 0xe0, 0x53, 0x6e,
	0x4a, 0x16, 0x1d, 0x42, 0x25, 0x4c, 0xe9, 0x8c, 0xa4, 0xe2, 0xaf, 0x3b, 0x62, 0x84, 0x60, 0x5d,
	0xf1, 0xa2, 0x0b, 0xf8, 0x3f, 0x60, 0x49, 0xe6, 0xd3, 0x84, 0xa4, 0x5e, 0x48, 0x53, 0xb3, 0xce,
	0xdb, 0xf7, 0x45, 0xfb, 0xb6, 0xe8, 0xea, 0xbf, 0xb0, 0x4f, 0x53, 0x64, 0x41, 0xb9, 0x4c, 0xc9,
	0x54, 0xb8, 0x45, 0x17, 0x16, 0xce, 0xb9, 0xfc, 0x8b, 0xce, 0xa1, 0x32, 0xe5, 0x71, 0x98, 0xff,
	0x2c, 0xd0, 0xd5, 0x4e, 0x5a, 0x76, 0x15, 0xab, 0xbd, 0x19, 0x92, 0x03, 0xcb, 0xbd, 0xaa, 0x3e,
	0x57, 0xbc, 0x03, 0x59, 0xad, 0x19, 0xf5, 0x81, 0xac, 0xca, 0x46, 0x63, 0x20, 0xab, 0x0d, 0x43,
	0xe9, 0x5c, 0xc1, 0xdd, 0xea, 0xc0, 0xbb, 0x89, 0x1f, 0x90, 0x98, 0x24, 0x19, 0x3a, 0x85, 0x7a,
	0x75, 0x86, 0x97, 0xf8, 0x31, 0x99, 0x9a, 0xc0, 0xaa, 0x77, 0x9b, 0x8e, 0x51, 0x26, 0xb5, 0xc9,
	0xbb, 0x5a, 0x85, 0x6e, 0x4b, 0xe0, 0x1c, 0x2d, 0x56, 0x18, 0xbc, 0xad, 0xb0, 0xb4, 0x5e, 0x61,
	0xf0, 0x5c, 0x60, 0xf0, 0x5a, 0x60, 0x30, 0x2f, 0x30, 0x58, 0x14, 0x18, 0x7c, 0x14, 0x18, 0x7c,
	0x15, 0x58, 0x5a, 0x17, 0x18, 0xbc, 0x7c, 0x62, 0xe9, 0x27, 0x00, 0x00, 0xff, 0xff, 0xb7, 0x29,
	0x93, 0x35, 0x1c, 0x02, 0x00, 0x00,
}
